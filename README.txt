由於平日工作需求，我發現時常會有想要讓機器A上的程式去觸發機器B上的另一個程式。

舉例來說，在Web Server上的網頁上去重啟Datacenter上的archive程式就是一個很好的例子。

基於這樣的想法與先前同事於socket server工作的啟發，我嘗試用PHP去寫一個基於socket的遠端工作派送與執行程式群。

後來越發感覺到，心裡所想的功能其實在某種程度上跟分散式Job Center/Cluster十分雷同，

在此，我將詳述本專案構想，供大家參考。

首先，本專案名稱暫定為masterchief，英文是「士官長」的意思，取其能指揮士官跟小兵做各種事情的意思，來比擬控制各項"Job"進行的程式功能。

目前的規劃是至少會有3支程式，其暫定名稱與功能如下：

mc_client:
    這是用於在client主機上給各種程式將工作需求發送到Job Center的程式，由於其接口是透過OS的命令列來呼叫，所以可跨語言平台使用。
    除了可以指派想要Job Center執行的工作程式外，較重要的特色是，這隻程式可以指派執行工作時的使用者、工作執行目錄、執行逾時時間與執行方式(同步或非同步)。

masterchief: 
    這是run在Job Center上的工作接收/指派/處理程式，用於接收/指派/處理mc_client透過socket送來的各種工作。其特色如下：
        1. 為一聆聽特定port的常駐服務(daemon)，通訊埠暫定為9527。
        2. 依照mc_job_sender指示的使用者、執行目錄、執行逾時時間與執行方式來執行工作。
           若送來的工作是同步工作，mastercheif會fork出一個子程序來加以執行，這樣做的原因是為了不要讓需執行很久的工作阻塞主程式的運行，造成後續工作排隊等候的情況。
           該子程序亦會照mc_client指派之逾時設定，在執行時間超過該逾時設定後自行結束，且同時存在的子程序不可超過一定數量，以避免主機記憶體虛耗。
           若送來的的工作為非同步工作時，mastercheif會將該工作派入queue中，靜候處理。
           當同步工作的子程序結束(出錯、逾時或執行完畢)或是異步工作被排入queue後，masterchief會透過socket回報mc_client，並加以紀錄到本機log與DB中，以利後續查詢與處理。

mc_queue_processor:
    用來處理被masterchief放入queue的工作之程式，特色如下：
    1. 為一常駐程式(daemon)。
    2. 處理queue中工作時會fork出一個子程序來加以執行，這也是為了解決排隊問題，也同樣有子程序逾時與數量控制，用來避免主機記憶體虛耗。
    3. 工作完成時會紀錄到本機log與DB中，以利後續查詢與處理。

mc_db_checker:
    用來檢查在DB中mc_queue_work執行失敗的工作紀錄，並將其排入queue等待再次執行。若DB中該工作的執行失敗次數達到3次後，便後不再執行並發出email通知。


由於工作細節與結果都會進入DB，屆時亦規劃提供網頁介面加以查詢與管理工作(例如利用網頁重新執行前回執行失敗的工作)。

